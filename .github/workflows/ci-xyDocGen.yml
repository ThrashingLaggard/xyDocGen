name: CI/CD for xyDocGen

# Trigger: Run on pushes to the "master" branch
on:
  push:
    branches:
      - master

permissions:
  contents: write

# ----------------------
# Concurrency control ensures only the latest run for the same
# workflow+ref is active; older in-progress runs are cancelled.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
# ----------------------

jobs:
  build-and-changed:
    runs-on: ubuntu-latest  # GitHub-hosted Ubuntu Linux runner

    # =========================================================
    # GLOBAL JOB GUARD (hard gate):
    # Only run this entire job if the latest commit message contains
    # any of the semantic-versioning keywords. We lower-case the
    # message to make the check case-insensitive.
    #
    # Keywords checked here:
    #   - "breaking change"  (major bump)
    #   - "feat:"            (minor bump)
    #   - "fix:"             (patch bump)
    #
    # To add more keywords, extend the OR list below.
    # =========================================================
    if: >
      contains(toLower(github.event.head_commit.message), 'breaking change')
      || contains(toLower(github.event.head_commit.message), 'feat:')
      || contains(toLower(github.event.head_commit.message), 'fix:')

    steps:
      # ------------------------------------------------------
      # 1) Checkout repository to get sources and Git history
      # ------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # ----------------------------------------------------------------
      # 2) Guard against double commits with identical messages (variant 2)
      #    This prevents accidental duplicate processing/publishing if the
      #    same commit message is pushed twice in a row.
      #    Exposes SKIP=true/false via GITHUB_ENV (used only for diagnostics;
      #    we still keep the hard gate at job-level to avoid wasted minutes).
      # ----------------------------------------------------------------
      - name: Guard – skip duplicate commit message
        id: guard
        shell: bash
        run: |
          # Ensure the last 2 commits are available
          git fetch --depth=2 origin ${{ github.ref }}

          m1="$(git log -1 --pretty=%B)"
          m2="$(git log -2 --pretty=%B | sed -n '2p')"

          if [ "$m1" = "$m2" ]; then
            echo "SKIP=true" >> "$GITHUB_ENV"
            echo "Duplicate commit message – skipping."
          else
            echo "SKIP=false" >> "$GITHUB_ENV"
          fi

      # -------------------------------------
      # 3) Install .NET 8 SDK for build/test
      # -------------------------------------
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # ----------------------------------------
      # 4) Restore NuGet dependencies for build
      # ----------------------------------------
      - name: Restore dependencies
        run: dotnet restore xyDocGen/xyDocumentor.csproj

      # --------------------------------------------------------------------
      # 5) Determine semantic version bump from the latest commit message
      #    Rules (case-insensitive):
      #      - Contains "BREAKING CHANGE"  -> major++
      #      - Starts with "feat:"         -> minor++, patch=0
      #      - Starts with "fix:"          -> patch++
      #
      #    Includes a fallback that flattens newlines to handle multi-line
      #    messages reliably.
      #    Exposes the computed version as env.version (GITHUB_ENV).
      # --------------------------------------------------------------------
      - name: Generate new version from commits
        id: versioning
        shell: bash
        run: |
          # Get current version from the .csproj
          current_version=$(grep -oPm1 "(?<=<PackageVersion>)[^<]+" xyDocGen/xyDocumentor.csproj)
          echo "Current version: $current_version"

          # Get latest commit message (this is what gated the job)
          commits=$(git log -1 --pretty=%B)
          echo "Latest commit message:"
          echo "----------------------"
          echo "$commits"
          echo "----------------------"

          # Split current version into major.minor.patch
          major=$(echo "$current_version" | cut -d. -f1)
          minor=$(echo "$current_version" | cut -d. -f2)
          patch=$(echo "$current_version" | cut -d. -f3)

          changed="false"

          # Primary check: line-sensitive (useful when prefixes like "feat:" start lines)
          if echo "$commits" | grep -iq "BREAKING CHANGE"; then
            major=$((major + 1)); minor=0; patch=0; changed="true"
          elif echo "$commits" | grep -iqE "^(feat|fix):"; then
            if echo "$commits" | grep -iq "^feat:"; then
              minor=$((minor + 1)); patch=0; changed="true"
            elif echo "$commits" | grep -iq "^fix:"; then
              patch=$((patch + 1)); changed="true"
            fi
          fi

          # Fallback: flatten newlines, then search again (robust against formatting)
          if [ "$changed" = "false" ]; then
            commitsSingleLine=$(echo "$commits" | tr '\n' ' ')
            if echo "$commitsSingleLine" | grep -iq "BREAKING CHANGE"; then
              major=$((major + 1)); minor=0; patch=0; changed="true"
            elif echo "$commitsSingleLine" | grep -iq "feat:"; then
              minor=$((minor + 1)); patch=0; changed="true"
            elif echo "$commitsSingleLine" | grep -iq "fix:"; then
              patch=$((patch + 1)); changed="true"
            fi
          fi

          if [ "$changed" = "false" ]; then
            echo "No semantic version keyword found. Keeping current version."
          else
            echo "Semantic version keyword found. Updating current version."
          fi

          new_version="$major.$minor.$patch"
          echo "New version: $new_version"

          # Export version for other steps
          echo "version=$new_version" >> "$GITHUB_ENV"

      # ----------------------------------------------------------------
      # 6) Update the PackageVersion in the .csproj with the new version
      # ----------------------------------------------------------------
      - name: Update .csproj with new version
        shell: bash
        run: |
          sed -i "s/<PackageVersion>.*<\/PackageVersion>/<PackageVersion>${{ env.version }}<\/PackageVersion>/" xyDocGen/xyDocumentor.csproj

      # -------------------------------------------------------------------
      # 7) Commit and push the version bump (if there is a change to commit)
      #    "continue-on-error" is kept to avoid failing the pipeline if the
      #    push races with another run.
      # -------------------------------------------------------------------
      - name: Commit updated version
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git pull --ff-only origin master
          git add xyDocGen/xyDocumentor.csproj

          if git diff --cached --quiet; then
            echo "Nothing to commit – skipping."
          else
            git commit -m "chore: bump version to ${{ env.version }}"
            git push origin master
            echo "Changes committed and pushed."
          fi
        continue-on-error: true

      # --------------------------------
      # 8) Build the project (Release)
      # --------------------------------
      - name: Build xyDocGen
        run: dotnet build xyDocGen/xyDocumentor.csproj --configuration Release --no-restore

      # ------------------------------
      # 9) Run unit tests (no build)
      # ------------------------------
      - name: Test xyDocGen
        run: dotnet test xyDocGen/xyDocumentor.csproj --no-build --verbosity normal

      # ---------------------------------------------
      # 10) Pack the NuGet package into ./out folder
      # ---------------------------------------------
      - name: Pack NuGet package
        run: dotnet pack xyDocGen/xyDocumentor.csproj --configuration Release --no-build -o out

      # -------------------------------------------------------------------
      # 11) Check whether the package version already exists on nuget.org
      #     If it exists, skip publish and release creation.
      # -------------------------------------------------------------------
      - name: Check package version exists
        id: check_version
        shell: bash
        run: |
          version=$(grep -oPm1 "(?<=<PackageVersion>)[^<]+" xyDocGen/xyDocumentor.csproj)
          echo "Detected version: $version"

          content_type=$(curl -sI -o /dev/null -w "%{content_type}" \
            "https://api.nuget.org/v3-flatcontainer/xydocgen/$version/xydocgen.$version.nupkg")

          if [[ "$content_type" == "application/octet-stream" ]]; then
            echo "Package version $version already exists. Skipping publish."
            echo "skip_publish=true" >> "$GITHUB_OUTPUT"
          else
            echo "Package version $version not found. Proceeding to publish."
            echo "skip_publish=false" >> "$GITHUB_OUTPUT"
          fi

      # --------------------------------------------------------------
      # 12) Push the package to NuGet (only if not already published)
      # --------------------------------------------------------------
      - name: Push to NuGet
        if: steps.check_version.outputs.skip_publish == 'false'
        run: >
          dotnet nuget push out/*.nupkg
          --source https://api.nuget.org/v3/index.json
          --api-key ${{ secrets.XYDOCGEN_API_KEY }}
          --skip-duplicate

      # --------------------------------------------------------------
      # 13) Create a GitHub Release for the new version (if published)
      # --------------------------------------------------------------
      - name: Create GitHub Release
        if: steps.check_version.outputs.skip_publish == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.version }}
          name: Release ${{ env.version }}
          draft: false
          prerelease: false
